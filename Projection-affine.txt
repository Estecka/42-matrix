Let there be an arbitrary frustrum F whose bounding box is [l,b,n][r,t,f].
l = left
r = right
t = top
b = bottom
n = near
f = far
Because this is a bounding box, **we are using the near and far planes' coordinates, not their distance to the observer.** Therefore, if the frustrum is facing toward Z-, then 'n' and 'f' should both have negative values. 

Let there be an arbitrary projection matrix, M, corresponding to said frustrum:
[m00,   0,   0, m30]
[  0, m11,   0, m31]
[  0,   0, m22, m32]
[  0,   0,  -1,   0]


## What is M's NDC ?

Let C be the clip space, [Cl,Cb,Cn,-n][Cr,Ct,Cf,-f], corresponding to this frustrum and this matrix.
The points corresponding to the extreme corners of the frustrum are [l*n/f, b*n/f, n] and [r, t, f].
Thus:
[Cl] [Cr]  =  [m00,   0,   0, m30] * [l*n/f] [r]
[Cb] [Ct]     [  0, m11,   0, m31]   [b*n/f] [t]
[Cn] [Cf]     [  0,   0, m22, m32]   [    n] [f]
[-n] [-f]     [  0,   0,  -1,   0]   [    1] [1]

Cl = m00*ln/f + m30
Cb = m11*bn/f + m31
Cn = m22*n    + m32
Cr = m00*r + m30
Ct = m11*t + m31
Cf = m22*f + m32

We may also compute the dimensions of the clip space, those shorthands will show up later:
Cr - Cl = (m00*r + m30) - (m00*ln/f + m30)
        = m00*r - m00*ln/f
        = m00(r - ln/f)

Ct - Cb = (m11*t + m31) - (m11*bn/f + m31)
        = m11*t - m11*bn/f
        = m11(t - bn/f)

Cf - Cn = (m22*f + m32) - (m22*n + m32)
        = m22*f - m22*n
        = m22(f - n)

We obtain the NDC after perspective divide : [Cl/-n, Cb/-n, Cn/-n][Cr/-f, Ct/-f, Cz/-f]


## Correcting the NDC

Let our desired NDC be [u,v,w][x,y,z]
The clip space C`corresponding to this NDC and this frustrum is:
[u,v,w,1]*-n [x,y,z,1]*-f = [-nu,-nv,-nw,-n][-fx,-fy,-fz,-f]

Let R be the affine transformation matrix that will remap points from C to C` :
[-nu] [-fx]  =  [r00,   0,   0, 0, r40] * [Cl] [Cr]
[-nv] [-fy]     [  0, r11,   0, 0, r41]   [Cb] [Ct]
[-nw] [-fz]     [  0,   0, r22, 0, r42]   [Cn] [Cf]
[ -n] [ -f]     [  0,   0,   0, 1,   0]   [-n] [-f]
[  1] [  1]     [  0,   0,   0, 0,   1]   [ 1] [ 1]

remap(?)    = (? - iMin)/(iMax - iMin) * (oMax - oMin) + oMin
?*r00 + r40 = (? -   Cl)/(  Cr -   Cl) * ( -fx -  -nu) +  -nu
            = (?-Cl) * (nu-fx)/(Cr-Cl) - nu
            = ?*(nu-fx)/(Cr-Cl) - Cl*(nu-fx)/(Cr-Cl) - nu

And so on, so forth :
?*r00 + r40 = ?*(nu-fx)/(Cr-Cl) - Cl(nu-fx)/(Cr-Cl) - nu
?*r11 + r41 = ?*(nv-fy)/(Ct-Cb) - Cb(nv-fy)/(Ct-Cb) - nv
?*r22 + r42 = ?*(nw-fz)/(Cf-Cn) - Cn(nw-fz)/(Cf-Cn) - nw

r00 =    (nu-fx)/(Cr-Cl)       =                 (nu-fx)/m00(r-ln/f)
r11 =    (nv-fy)/(Ct-Cb)       =                 (nv-fy)/m11(t-bn/f)
r22 =    (nw-fz)/(Cf-Cn)       =                 (nw-fz)/m22(f-n)
r40 = -Cl(nu-fx)/(Cr-Cl) - nu  =  -(m00*ln/f+m30)(nu-fx)/m00(r-ln/f) - nu 
r41 = -Cb(nv-fy)/(Ct-Cb) - nv  =  -(m11*bn/f+m31)(nv-fy)/m11(t-bn/f) - nv 
r42 = -Cn(nw-fz)/(Cf-Cn) - nw  =  -(m22*n   +m32)(nw-fz)/m22(f-n)    - nw 


Verification :
-nu = Cl * r00 + r40
    = Cl * (nu-fx)/(Cr-Cl) - Cl(nu-fx)/(Cr-Cl) - nu
    = (Cl - Cl)(nu-fx)/(Cr-Cl) - nu
    = 0*(nu-fx)/(Cr-Cl) - nu
    = -nu
-nv = Cb * r11 + r41
    = (Cb - Cb) * (nv-fy)/(Ct-Cb) - nv
    = 0*(nv-fy)/(Ct-Cb) - nv
    = -nv
-nw = Cn * r22 + r42
    = (Cn - Cn) * (nw-fz)/(Cf-Cn) - nw
    = 0*(nw-fz)/(Cf-Cn) - nw
    = -nw
-fx = Cr * r00 + r40
    = (Cr - Cl) * (nu-fx)/(Cr-Cl) - nu
    = (nu-fx) - nu
    = -fx
-fy = Ct * r11 + r41
    = (Ct - Cb) * (nv-fy)/(Ct-Cb) - nv
    = (nv-fy) - nv
    = -fy
-fz = Cf * r22 + r42
    = (Cf - Cn) * (nw-fz)/(Cf-Cn) - nw
    = (nw-fz) - nw
    = -fz
OK


We can use R to apply the NDC correction directly to M, creating a new projection matrix P:
[p00,   0,   0, p30] = [r00,   0,   0, 0, r40] * [m00,   0,   0, m30]
[  0, p11,   0, p31]   [  0, r11,   0, 0, r41]   [  0, m11,   0, m31]
[  0,   0, p22, p32]   [  0,   0, r22, 0, r42]   [  0,   0, m22, m32]
[  0,   0,  -1,   0]   [  0,   0,   0, 1,   0]   [  0,   0,  -1,   0]
[  0,   0,   0,   1]   [  0,   0,   0, 0,   1]   [  0,   0,   0,   1]

p00 = m00 * r00
    = m00 * (nu-fx)/m00(r-ln/f)
    = (nu-fx)/(r-ln/f)
    = f(nu-fx)/f(r-ln/f)
    = f(nu-fx)/(fr-ln)

p11 = m11 * r11
    = m11 * (nv-fy)/m11(t-bn/f)
    = (nv-fy)/(t-bn/f)
    = f(nv-fy)/f(t-bn/f)
    = f(nv-fy)/(ft-bn)

p22 = m22 * r22
    = m22 * (nw-fz)/m22(f-n)
    = (nw-fz)/(f-n)

p30 = m30 * r00 + r40
    = (m30 - Cl) * (nu-fx)/(Cr-Cl) - nu
    = (m30 - (m00*ln/f + m30)) * (nu-fx)/m00(r - ln/f) - nu
    = (-m00*ln/f) * (nu-fx)/m00(r - ln/f) - nu
    = -ln/f * (nu-fx)/(r - ln/f) - nu
    = -ln(nu-fx)/f(r - ln/f) - nu
    = -ln(nu-fx)/(fr - ln) - nu
    = -ln(nu-fx)/(fr - ln) - nu(fr-ln)/(fr-ln)
    = (-ln(nu-fx) - nu(fr-ln)) / (fr-ln)
    = (-lnnu + lnfx - nufr + nuln) / (fr-ln)
    = (lnfx - nufr) / (fr-ln)
    = nf(lx - ur) / (fr-ln)

p31 = m31 * r11 + r41
    = m31 * (nv-fy)/(Ct-Cb) - Cb(nv-fy)/(Ct-Cb) - nv
    = (m31 - Cb) * (nv-fy)/(Ct-Cb) - nv
    = (m31 - (m11*bn/f + m31)) * (nv-fy)/m11(t - bn/f) - nv
    = (-m11*bn/f) * (nv-fy)/m11(t - bn/f) - nv
    = (-bn/f) * (nv-fy)/(t - bn/f) - nv
    = -bn(nv-fy)/f(t - bn/f) - nv
    = -bn(nv-fy)/(ft - bn) - nv
    = -bn(nv-fy)/(ft - bn) - nv(ft-bn)/(ft-bn)
    = (-bn(nv-fy) - nv(ft - bn)) / (ft-bn)
    = (-bnnv + bnfy - nvft + nvbn) / (ft-bn)
    = (bnfy - nvft) / (ft-bn)
    = nf(by - vt) / (ft-bn)

p32 = m32 * r22 + r42
    = m32 * (nw-fz)/(Cf-Cn) - Cn(nw-fz)/(Cf-Cn) - nw
    = (m32 - Cn) * (nw-fz)/(Cf-Cn) - nw
    = (m32 - (m22*n + m32)) * (nw-fz)/m22(f-n) - nw
    = (-m22*n) * (nw-fz)/m22(f-n) - nw
    = -n(nw-fz)/(f-n) - nw
    = -n(nw-fz)/(f-n) - nw(f-n)/(f-n)
    = (-n(nw-fz) - nw(f-n)) / (f-n)
    = (-nnw + nfz - nwf + nwn) / (f-n)
    = (nfz - nwf) / (f-n)
    = nf(z-w) / (f-n)

Verification:
[-nu] [-fx] = [p00,   0,   0, p30] * [l*n/f] [r]
[-nv] [-fy]   [  0, p11,   0, p31]   [b*n/f] [t]
[-nw] [-fz]   [  0,   0, p22, p32]   [    n] [f]
[ -n] [ -f]   [  0,   0,  -1,   0]   [    1] [1]

-nu = ln/f * p00 + p30
    = ln/f * f(nu-fx)/(fr-ln) + nf(lx-ur)/(fr-ln)
    = (ln/f * f(nu-fx) + nf(lx-ur)) / (fr-ln)
    = (ln * (nu-fx) + nf(lx-ur)) / (fr-ln)
    = (lnnu - lnfx + nflx - nfur) / (fr-ln)
    = (lnnu - nfur) / (fr-ln)
    =  nu(ln - fr) / (fr-ln)
    = -nu(fr - ln) / (fr-ln)
    = -nu
-nv = bn/f * p11 + p31
    = bn/f * f(nv-fy)/(ft-bn) + nf(by-vt)/(ft-bn)
    = (bn/f*f(nv-fy) + nf(by-vt)) / (ft-bn)
    = (bn(nv-fy) + nf(by-vt)) / (ft-bn)
    = (bnnv - bnfy + nfby - nfvt) / (ft-bn)
    = (bnnv - nfvt) / (ft-bn)
    =  nv(bn - ft) / (ft-bn)
    = -nv(ft - bn) / (ft-bn)
    = -nv
-nw = n * p22 + p32
    = n * (nw-fz)/(f-n) + nf(z-w)/(f-n)
    = (n*(nw-fz) + nf(z-w)) / (f-n)
    = (nnw - nfz + nfz - nfw) / (f-n)
    = (nnw - nfw) / (f-n)
    =  nw(n - f) / (f-n)
    = -nw(f - n) / (f-n)
    = -nw
-fx = r * p00 + p30
    = r * f(nu-fx)/(fr-ln) + nf(lx-ur)/(fr-ln)
    = (rf(nu-fx) + nf(lx-ur)) / (fr-ln)
    = (rfnu - rffx + nflx - nfur) / (fr-ln)
    = (-rffx + nflx) / (fr-ln)
    = -fx(rf - nl) / (fr-ln)
    = -fx
-fy = t * p11 + p31
    = t * f(nv-fy)/(ft-bn) + nf(by-vt)/(ft-bn)
    = (tf(nv-fy) + nf(by-vt)) / (ft-bn)
    = (tfnv - tffy + nfby - nfvt) / (ft-bn)
    = (-tffy + nfby) / (ft-bn)
    = -fy(tf - nb) / (ft-bn)
    = -fy
-fz = f * p22 + p32
    = f * (nw-fz)/(f-n) + nf(z-w)/(f-n)
    = (f(nw-fz) + nf(z-w)) / (f-n)
    = (fnw - ffz + nfz - nfw) / (f-n)
    = (-ffz + nfz) / (f-n)
    = -fz(f - n) / (f-n)
    = -fz
OK

## Conclusion

For any frustrum [l,b,n][r,t,f] and any NDC [u,v,w][x,y,z], the corresponding projection matrix is:
[f(nu-fx)/(fr-ln),                0,             0, nf(lx-ur)/(fr-ln)]
[               0, f(nv-fy)/(ft-bn),             0, nf(by-vt)/(ft-bn)]
[               0,                0, (nw-fz)/(f-n),     nf(z-w)/(f-n)]
[               0,                0,            -1,                 0]


For a symmetrical frustrum (l = -r and b = -t) the matrix can be slightly simplified:

p00 = f(nu-fx)/(fr-ln)
    = f(nu-fx)/(fr+rn)
    = f(nu-fx)/r(f+n)

p11 = f(nv-fy)/(ft-bn)
    = f(nv-fy)/(ft+tn)
    = f(nv-fy)/t(f+n)

p30 =  nf(lx-ur) / (fr-ln)
    =  nf(-rx-ur)/ (fr+rn)
    = -nfr(x+u) / r(f+n)
    = -nf(x+u)/(f+n)

p31 =  nf(by-vt) / (ft-bn)
    =  nf(-vt-ty)/ (ft+tn)
    = -nft(v+y) / t(f+n)
    = -nf(v+y)/(f+n)


[f(nu-fx)/r(f+n),               0,             0, -nf(u+x)/(f+n)]
[              0, f(nv-fy)/t(f+n),             0, -nf(v+y)/(f+n)]
[              0,               0, (nw-fz)/(f-n),  nf(z-w)/(f-n)]
[              0,               0,            -1,              0]

For a few remarkable NDC's, the matrix can be simplifed even further :


### [u,v,w][x,y,z] = [-1,-1,-1][1,1,1]

p00 = f(nu-fx)/r(f+n)
    = f(-n-f)/r(f+n)
    = -f(n+f)/r(f+n)
    = -f/r

p11 = f(nv-fy)/t(f+n)
    = f(-n-f)/t(f+n)
    = -f(n+f)/t(f+n)
    = -f/t

p22 = (nw-fz)/(f-n)
    = (-n-f)/(f-n)
    = -(n+f)/(f-n)

p30 = -nf(u+x) / (f+n)
    = -nf(-1+1) / (f+n)
    = -nf * 0 / (f+n)
    = 0

p31 = -nf(v+y) / (f+n)
    = -nf(-1+1) / (f+n)
    = -nf * 0  / (f+n)
    = 0

p32 = nf(z-w) / (f-n)
    = nf(1 - -1) / (f-n)
    = 2nf/(f-n)

[-f/r,    0,            0,         0]
[   0, -f/t,            0,         0]
[   0,    0, -(n+f)/(f-n), 2nf/(f-n)]
[   0,    0,           -1,         0]


### [u,v,w][x,y,z] = [0,0,0][1,1,1]

p00 = f(nu-fx)/r(f+n)
    = f(0n-f )/r(f+n)
    = f(-f)/r(f+n)
    = -f²/r(f+n)

p11 = f(nv-fy)/t(f+n)
    = f(0n-1f)/t(f+n)
    = f(-f)/t(f+n)
    = -f²/t(f+n)

p22 = (nw-fz)/(f-n)
    = (0n-1f)/(f-n)
    = -f/(f-n)

p30 = -nf(u+x)/(f+n)
    = -nf(0+1)/(f+n)
    = -nf/(f+n)

p31 = -nf(v+y)/(f+n)
    = -nf(0+1)/(f+n)
    = -nf/(f+n)

p32 = nf(z-w) / (f-n)
    = nf(0-1) / (f-n)
    = -nf/(f-n)

[-f²/r(f+n),           0,        0, -nf/(f+n)]
[          0, -f²/t(f+n),        0, -nf/(f+n)]
[          0,          0, -f/(f-n), -nf/(f-n)]
[          0,          0,       -1,         0]


### [u,v,w][x,y,z] = [-1,-1,0][1,1,1]

Mix and match the results from the two matrices above:

[-f/r,    0,        0,         0]
[   0, -f/t,        0,         0]
[   0,    0, -f/(f-n), -nf/(f-n)]
[   0,    0,       -1,         0]
